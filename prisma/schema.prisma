generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["windows"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

generator pothos {
  provider    = "prisma-pothos-types"
  prismaUtils = true
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator pothosCrud {
  provider            = "prisma-generator-pothos-codegen"
  generatorConfigPath = "./pothos.config.cjs"
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique @default(uuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  activatedAt   DateTime?
  deletedAt     DateTime?
  phoneNumber   String         @unique @default(uuid())
  accessCode    String         @unique
  posts         Post[]
  participation Participation?
  userStatus    UserStatus     @relation(fields: [userStatusId], references: [id])
  userStatusId  String         @default("initialized")
  invitations   Invitation[]
  messages      Message[]

  @@index([userStatusId])
}

model UserStatus {
  id        String   @id
  createdAt DateTime @default(now())
  User      User[]
}

model Admin {
  id         String       @id @default(uuid())
  email      String       @unique
  password   String
  post       Post[]
  invitation Invitation[]
}

model Post {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now())
  image             Bytes
  reading           Float            @default(0)
  postStatus        PostStatus       @relation(fields: [postStatusId], references: [id])
  postStatusId      String
  statusChangedBy   Admin?           @relation(fields: [statusChangedById], references: [id])
  statusChangedById String?
  postedBy          User             @relation(fields: [postedById], references: [id])
  postedById        String
  notes             String?
  rejectionReason   RejectionReason? @relation(fields: [rejectionReasonId], references: [id])
  rejectionReasonId String?
  size              Float            @default(0)

  @@index([postStatusId])
  @@index([postedById])
  @@index([statusChangedById])
  @@index([rejectionReasonId])
}

model RejectionReason {
  id        String   @id
  createdAt DateTime @default(now())
  Post      Post[]
}

model PostStatus {
  id        String   @id
  createdAt DateTime @default(now())
  Post      Post[]
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  message   String
  sentBy    User     @relation(fields: [sentById], references: [id])
  sentById  String

  @@index([sentById])
}

model Participation {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  totalIncentive Float
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @unique

  @@index([userId])
}

model IncentiveTable {
  id        String @id @default(uuid())
  index     Int
  incentive Float
}

model Invitation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  sentBy    Admin?   @relation(fields: [sentById], references: [id])
  sentById  String?
  sentTo    User     @relation(fields: [sentToId], references: [id])
  sentToId  String

  @@index([sentById])
  @@index([sentToId])
}

model LastQualtricsResponseRetrieval {
  id String @id
}
